#  MYSQL_DATABASE: crud_operations_db
#  MYSQL_USER: root
#  MYSQL_PASSWORD: rootpass
# -----
# contnr1: db (mysql) @port:3306
# contnr2: backend (expressjs) @port:4000
# contnr3: frontend (reactjs) @port:3000
# contnr4: nginx (proxy) @port:80
# contnr5: adminer @port:8080
# ------

services:
  db:
    image: mysql
    container_name: db
    restart: always
    volumes:
      - ./setup.sql:/docker-entrypoint-initdb.d/setup.sql
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: rootpass  # for root user login
      MYSQL_DATABASE: crud_operations_db # creates database automatically


  backend:
    container_name: backend
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./server
    depends_on:
      - db
    ports:
      - 5000:5000 # port defined in index.js, Dockerfile 
    environment:
      MYSQL_HOST: db           # used in index.js
      MYSQL_DATABASE: test_db  # used in index.js
      MYSQL_USER: MYSQL_USER   # used in index.js
      MYSQL_PASSWORD: MYSQL_PASSWORD # used in index.js
      DB_TABLENAME: tbl_users # used in 


  frontend:
    container_name: frontend
    restart: always
    build:
      dockerfile: Dockerfile
      context: ./frontend
    depends_on:
      - backend
    ports:
      - 3000:3000
    environment:
      - BACKEND_API_URL=http://192.168.0.102:4000 # used in /src/pages/Add.jsx,Books.jsx,Update.jsx
      



#  nginx-proxy:
#    container_name: nginx-proxy
#    depends_on:
#      - backend
#      - frontend
#    restart: always
#    build:
#      dockerfile: Dockerfile
#      context: ./nginx
#    ports:
#      - 80:80



  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      - db
